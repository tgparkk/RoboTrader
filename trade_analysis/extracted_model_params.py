#!/usr/bin/env python3
"""
추출된 ML 모델 파라미터
자동 생성됨 - 수동 편집하지 마세요
"""

import numpy as np

# 추출된 모델 파라미터
EXTRACTED_PARAMS = {'lgb_classifier': {'n_estimators': 100, 'max_depth': 6, 'learning_rate': 0.1, 'subsample': 1.0, 'colsample_bytree': 1.0, 'feature_importances': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'model_dump': {'name': 'tree', 'version': 'v4', 'num_class': 1, 'num_tree_per_iteration': 1, 'label_index': 0, 'max_feature_idx': 68, 'objective': 'binary sigmoid:1', 'average_output': False, 'feature_names': ['Column_0', 'Column_1', 'Column_2', 'Column_3', 'Column_4', 'Column_5', 'Column_6', 'Column_7', 'Column_8', 'Column_9', 'Column_10', 'Column_11', 'Column_12', 'Column_13', 'Column_14', 'Column_15', 'Column_16', 'Column_17', 'Column_18', 'Column_19', 'Column_20', 'Column_21', 'Column_22', 'Column_23', 'Column_24', 'Column_25', 'Column_26', 'Column_27', 'Column_28', 'Column_29', 'Column_30', 'Column_31', 'Column_32', 'Column_33', 'Column_34', 'Column_35', 'Column_36', 'Column_37', 'Column_38', 'Column_39', 'Column_40', 'Column_41', 'Column_42', 'Column_43', 'Column_44', 'Column_45', 'Column_46', 'Column_47', 'Column_48', 'Column_49', 'Column_50', 'Column_51', 'Column_52', 'Column_53', 'Column_54', 'Column_55', 'Column_56', 'Column_57', 'Column_58', 'Column_59', 'Column_60', 'Column_61', 'Column_62', 'Column_63', 'Column_64', 'Column_65', 'Column_66', 'Column_67', 'Column_68'], 'monotone_constraints': [], 'feature_infos': {}, 'tree_info': [{'tree_index': 0, 'num_leaves': 1, 'num_cat': 0, 'shrinkage': 1, 'tree_structure': {'leaf_value': 0.5108256237659907, 'leaf_count': 24}}], 'feature_importances': {}, 'pandas_categorical': None}, 'num_trees': 1}, 'lgb_regressor': {'n_estimators': 100, 'max_depth': 6, 'learning_rate': 0.1, 'subsample': 1.0, 'colsample_bytree': 1.0, 'feature_importances': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'model_dump': {'name': 'tree', 'version': 'v4', 'num_class': 1, 'num_tree_per_iteration': 1, 'label_index': 0, 'max_feature_idx': 68, 'objective': 'regression', 'average_output': False, 'feature_names': ['Column_0', 'Column_1', 'Column_2', 'Column_3', 'Column_4', 'Column_5', 'Column_6', 'Column_7', 'Column_8', 'Column_9', 'Column_10', 'Column_11', 'Column_12', 'Column_13', 'Column_14', 'Column_15', 'Column_16', 'Column_17', 'Column_18', 'Column_19', 'Column_20', 'Column_21', 'Column_22', 'Column_23', 'Column_24', 'Column_25', 'Column_26', 'Column_27', 'Column_28', 'Column_29', 'Column_30', 'Column_31', 'Column_32', 'Column_33', 'Column_34', 'Column_35', 'Column_36', 'Column_37', 'Column_38', 'Column_39', 'Column_40', 'Column_41', 'Column_42', 'Column_43', 'Column_44', 'Column_45', 'Column_46', 'Column_47', 'Column_48', 'Column_49', 'Column_50', 'Column_51', 'Column_52', 'Column_53', 'Column_54', 'Column_55', 'Column_56', 'Column_57', 'Column_58', 'Column_59', 'Column_60', 'Column_61', 'Column_62', 'Column_63', 'Column_64', 'Column_65', 'Column_66', 'Column_67', 'Column_68'], 'monotone_constraints': [], 'feature_infos': {}, 'tree_info': [{'tree_index': 0, 'num_leaves': 1, 'num_cat': 0, 'shrinkage': 1, 'tree_structure': {'leaf_value': 0.5749999930461248, 'leaf_count': 24}}], 'feature_importances': {}, 'pandas_categorical': None}, 'num_trees': 1}, 'rf_classifier': {'n_estimators': 100, 'max_depth': 10, 'min_samples_split': 2, 'min_samples_leaf': 1, 'n_features': 69, 'n_classes': 2, 'trees': [{'tree_id': 0, 'feature_importances': [0.11428571428571428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6043956043956045, 0.0, 0.0, 0.0, 0.0, 0.23976023976023977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04155844155844158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 9, 'max_depth': 4}, {'tree_id': 1, 'feature_importances': [0.11428571428571428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28763505402160855, 0.07346938775510205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04897959183673475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3286914765906363, 0.0, 0.1469387755102041], 'n_nodes': 15, 'max_depth': 5}, {'tree_id': 2, 'feature_importances': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0607142857142858, 0.0, 0.0, 0.0, 0.0, 0.45454545454545453, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.22499999999999998, 0.2597402597402597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 9, 'max_depth': 4}, {'tree_id': 3, 'feature_importances': [0.253968253968254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.293040293040293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16161616161616163, 0.2913752913752914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 9, 'max_depth': 3}, {'tree_id': 4, 'feature_importances': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'n_nodes': 3, 'max_depth': 1}]}, 'rf_regressor': {'n_estimators': 100, 'max_depth': 10, 'min_samples_split': 2, 'min_samples_leaf': 1, 'n_features': 69, 'n_classes': None, 'trees': [{'tree_id': 0, 'feature_importances': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13017751479289938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15384615384615385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7159763313609468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 7, 'max_depth': 3}, {'tree_id': 1, 'feature_importances': [6.0599021325813864e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0299510662921884e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7599309171156886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23997818435232263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 9, 'max_depth': 4}, {'tree_id': 2, 'feature_importances': [0.17405734047300314, 0.0, 0.0, 0.0, 0.0, 1.341746552889989e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012299196787148595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6858342460752099, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1278092166646383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 11, 'max_depth': 4}, {'tree_id': 3, 'feature_importances': [0.0, 0.0, 6.296679052741228e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.544210965947629e-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012283246662169798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9876537865473028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 9, 'max_depth': 4}, {'tree_id': 4, 'feature_importances': [0.0001087902523933937, 0.0, 0.0, 0.0, 0.0, 4.026048102063956e-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13598781549173194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05666158978822168, 0.807241804467653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'n_nodes': 11, 'max_depth': 3}]}, 'xgb_classifier': {'n_estimators': 100, 'max_depth': 6, 'learning_rate': 0.1, 'subsample': None, 'colsample_bytree': None, 'feature_importances': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'booster_dump': ['0:[f68<0] yes=1,no=2,missing=2\n\t1:leaf=0.12515007\n\t2:leaf=-0.179841861\n', '0:[f68<0] yes=1,no=2,missing=2\n\t1:leaf=0.118676893\n\t2:leaf=-0.163286969\n', '0:[f68<0] yes=1,no=2,missing=2\n\t1:leaf=0.113024533\n\t2:leaf=-0.149935648\n', '0:[f68<0] yes=1,no=2,missing=2\n\t1:leaf=0.108024262\n\t2:leaf=-0.138942882\n', '0:[f68<0] yes=1,no=2,missing=2\n\t1:leaf=0.103548847\n\t2:leaf=-0.129725948\n']}, 'xgb_regressor': {'n_estimators': 100, 'max_depth': 6, 'learning_rate': 0.1, 'subsample': None, 'colsample_bytree': None, 'feature_importances': [0.0015745976706966758, 0.0021110563538968563, 0.005682921037077904, 0.0, 9.502691113993933e-07, 0.0, 0.020784398540854454, 0.24510902166366577, 0.001975550316274166, 0.0005451429169625044, 0.001525586238130927, 1.6382307876483537e-05, 0.0, 9.456309868483004e-08, 0.0, 0.0, 6.266329819482053e-06, 1.3652704922151315e-07, 0.0, 0.0004273663507774472, 0.0, 0.007228604052215815, 4.554280508273223e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4004659280763008e-05, 0.00037971005076542497, 0.0, 0.0, 0.002587377093732357, 1.6877220332389697e-07, 9.537023260008937e-08, 0.000911374983843416, 0.0, 0.0, 0.0, 0.0, 0.0, 4.240281668899115e-06, 0.0, 0.0, 0.0, 0.051444780081510544, 0.5457293391227722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11193037778139114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'booster_dump': ['0:[f46<0.144193098] yes=1,no=2,missing=2\n\t1:[f7<0.215108424] yes=3,no=4,missing=4\n\t\t3:[f60<1.2921921] yes=5,no=6,missing=6\n\t\t\t5:leaf=-0.308636397\n\t\t\t6:leaf=0.121249996\n\t\t4:leaf=0.121249996\n\t2:leaf=0.223846152\n', '0:[f46<0.144193098] yes=1,no=2,missing=2\n\t1:[f7<0.215108424] yes=3,no=4,missing=4\n\t\t3:[f60<1.2921921] yes=5,no=6,missing=6\n\t\t\t5:[f0<-0.880495548] yes=7,no=8,missing=8\n\t\t\t\t7:leaf=-0.0793181881\n\t\t\t\t8:leaf=-0.29277274\n\t\t\t6:leaf=0.115187503\n\t\t4:leaf=0.115187503\n\t2:leaf=0.203183413\n', '0:[f46<0.144193098] yes=1,no=2,missing=2\n\t1:[f7<0.215108424] yes=3,no=4,missing=4\n\t\t3:[f60<1.2921921] yes=5,no=6,missing=6\n\t\t\t5:[f0<-0.880495548] yes=7,no=8,missing=8\n\t\t\t\t7:leaf=-0.0753522739\n\t\t\t\t8:leaf=-0.266423196\n\t\t\t6:leaf=0.109428123\n\t\t4:leaf=0.109428123\n\t2:leaf=0.184428051\n', '0:[f46<0.144193098] yes=1,no=2,missing=2\n\t1:[f7<0.215108424] yes=3,no=4,missing=4\n\t\t3:[f60<1.2921921] yes=5,no=6,missing=6\n\t\t\t5:leaf=-0.233420014\n\t\t\t6:leaf=0.103956722\n\t\t4:leaf=0.103956722\n\t2:leaf=0.167403921\n', '0:[f46<0.144193098] yes=1,no=2,missing=2\n\t1:[f7<0.215108424] yes=3,no=4,missing=4\n\t\t3:[f60<1.2921921] yes=5,no=6,missing=6\n\t\t\t5:[f0<-0.880495548] yes=7,no=8,missing=8\n\t\t\t\t7:leaf=-0.0599136613\n\t\t\t\t8:leaf=-0.22143729\n\t\t\t6:leaf=0.0987588838\n\t\t4:leaf=0.0987588838\n\t2:leaf=0.151951239\n']}, 'scaler': {'type': 'StandardScaler', 'mean': [54.708333333333336, 379.5416666666667, 43294.384617902164, 567165.0833333334, 580.9166666666666, 71008.44120713328, 1.7272382443475525, 0.038076289251614805, 0.1790030407823712, 0.5025710587984307, 7.134901137322057e-05, 0.8650534006043032, -0.7272382443475524, -0.001280910298097616, -0.0034242121550563166, -0.008230443739714384, 0.23883068620381834, 0.25859825499775085, 0.4053195400001952, 6.791666666666667, 5.666666666666667, 11.5, 27.875, 0.5416666666666666, 0.4583333333333333, 0.125, 0.16666666666666666, 0.12308961689575117, 0.21888692383317113, 0.31841881618562495, 0.0, 0.0, -0.0007127699978552706, -0.0015184650609659817, 78.50187265579059, 89.56506089110876, 1316.5601119714129, 544.5854060952266, 771.9747058761862, 1.0, 1.1594834979055653, 0.5160847385989475, 0.0, 6.460399837010204, 0.3942065679325824, 0.14517349094953116, 0.25020474370461926, 0.4260090311370523, 0.4553688730651464, 0.07450207049654775, 0.05895694573686385, 0.5, 0.0, 0.0, 0.0, 4.0, 0.0, 1.0, 0.0, 0.0, 11.964583333333332, 0.125, 0.08333333333333333, 0.0, 0.0, 0.0, 0.26375125688352535, 0.0, 1.0], 'scale': [58.72639892378516, 0.956520023604083, 37001.652057467254, 503921.92552814475, 1042.5151044735783, 59943.125817630564, 0.35059492206801157, 0.01817390752016786, 0.05317822578015328, 0.02627191497898899, 0.005531055362563436, 3.123877710688389, 0.35059492206801157, 0.010021061691027167, 0.0251687587840712, 0.022848513953069225, 0.015724237900338296, 0.025816246670977764, 0.03244131443122111, 1.5540046832476264, 1.0671873729054746, 1.707825127659933, 19.71951761580389, 0.4982608642958916, 0.4982608642958916, 0.33071891388307384, 0.372677996249965, 0.04299895549397506, 0.0942058863312097, 0.160938844816284, 1.0, 1.0, 0.009757651378597321, 0.01137797188647225, 8.646966255305411, 9.450808187911688, 2117.8774284087112, 1321.1202468306797, 944.432025103131, 1.0, 0.16084864710980948, 0.3010126725375093, 1.0, 4.181487633956718, 0.3848976713847888, 0.06721066491134908, 0.09229824595115865, 0.27907239555496904, 0.2841158525177726, 0.026220514810324183, 0.02430799751601526, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.6525535270369374, 0.33071891388307384, 0.2763853991962833, 1.0, 1.0, 1.0, 0.31573720988300985, 1.0, 1.35400640077266], 'n_features': 69}, 'label_encoders': {'signal_type': {'classes': ['pullback_pattern']}, 'sell_reason': {'classes': ['profit_3.0pct', 'stop_loss_1.3pct', 'stop_loss_2.9pct', 'stop_loss_3.0pct']}, 'stock_code': {'classes': ['044480', '064260', '099440', '177350', '215100', '215600', '234030', '234340', '290650', '319400', '332570', '351330', '381620', '456160', '459510', '463020', '950160']}}}


def get_model_params(model_name: str):
    """모델 파라미터 조회"""
    return EXTRACTED_PARAMS.get(model_name, {})

def get_feature_importances(model_name: str):
    """특성 중요도 조회"""
    params = get_model_params(model_name)
    return params.get('feature_importances', [])

def get_scaler_params():
    """스케일러 파라미터 조회"""
    return EXTRACTED_PARAMS.get('scaler', {})

def get_top_features(model_name: str, top_k: int = 10):
    """주요 특성 인덱스 조회"""
    importances = get_feature_importances(model_name)
    if not importances:
        return []
    
    indexed = list(enumerate(importances))
    sorted_features = sorted(indexed, key=lambda x: x[1], reverse=True)
    return [idx for idx, _ in sorted_features[:top_k]]

if __name__ == "__main__":
    print("📊 추출된 ML 모델 정보")
    print("=" * 40)
    
    for model_name, params in EXTRACTED_PARAMS.items():
        if 'error' in params:
            continue
        print(f"\n🤖 {model_name}")
        
        if model_name == 'scaler':
            print(f"   타입: {params.get('type')}")
            print(f"   특성 수: {params.get('n_features')}")
        elif model_name == 'label_encoders':
            print(f"   인코더 수: {len(params)}")
        else:
            if 'n_estimators' in params:
                print(f"   트리 개수: {params['n_estimators']}")
            if 'max_depth' in params:
                print(f"   최대 깊이: {params['max_depth']}")
            
            top_features = get_top_features(model_name, 5)
            if top_features:
                print(f"   주요 특성: {top_features}")
